name: Build and Deploy only affected Apps to Amazon ECS

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - "**.md"
      
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.S3_BUCKET_REGION }}
  AWS_S3_BUCKET: 'peter-###'
  SOURCE_DIR: './dist/packages/app'

jobs:
  test:
    runs-on: ubuntu-latest
    name: STEP | TESTING...💯
    steps:
      - run: echo "Do something..."
      
      - name: << Step results >>
        run: echo "테스트가 완료되었습니다. 100점입니다."
      
  build:
    needs: test
    runs-on: ubuntu-latest
    name: STEP | BUILDING...🔨
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      hasAffected: ${{ steps.checkForAffected.outputs.hasAffected }}
    steps:
      # Settings...
      - uses: actions/checkout@v3
        with:
            fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
            node-version: 18
            
      - uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - run: npm ci
      
      - name: << Set head and base for comparison >>
        uses: nrwl/nx-set-shas@v3
       
      - name: << Build only affected >>
        run: npx nx affected --target=build --base=${{ env.NX_BASE }} --head=${{ env.NX_HEAD }}  

      - name: << Check for affected projects >>
        uses: dkhunt27/action-nx-affected-list@v4
        id: checkForAffected
      
      - name: << Set matrix for next job >> 
        id: set-matrix
        run: echo "matrix={\"affectedApps\":${{ toJSON(steps.checkForAffected.outputs.affectedApps) }}}" >> $GITHUB_OUTPUT
        
      - name: << Upload artifact >>
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-report
          path: output/test

      - name: << Step results >>
        run: echo "빌드가 완료되었습니다. 빌드된 앱 = ${{ steps.checkForAffected.outputs.affectedApps }}"
      
      

  deploy:
    needs: build
    if: needs.build.outputs.hasAffected == 'true'
    runs-on: ubuntu-latest
    name: STEP | DEPLOYING...🎊
    strategy:
        matrix: ${{ fromJSON(needs.build.outputs.matrix) }}
    steps:
      - name: << Deploy to S3 >>
        run: |
          echo "${{ matrix.affectedApps }}"
      
          
